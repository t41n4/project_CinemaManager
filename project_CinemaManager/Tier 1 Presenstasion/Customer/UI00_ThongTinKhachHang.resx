<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>